<!--
    Author:    Alejandro Serrano
    Partner:   None
    Date:      10/11/2021
    Course:    CS 4540, University of Utah, School of Computing
    Copyright: CS 4540 and Alejandro Serrano - This work may not be copied for use in Academic Coursework.

    I, Alejandro Serrano, certify that I created this code from scratch and did not copy it in part or whole from
    another source.  Any references used in the completion of the assignment are cited in my README file.

    File Contents

    Admin page can only be accessed by an administrator user. Allows Admin to modify roles.
  -->
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@using Microsoft.AspNetCore.Identity;
@using PS4_TAApplication.Areas.Identity.Data
@model IEnumerable<TAUser>
@inject RoleManager<IdentityRole> RM
@inject UserManager<TAUser> UM

@section Scripts {
    <script src="~/js/ajax.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
}

@{
    int count = 1;
    int i = 1;
    string id_on_change = "";
    string id_disabled = "";
    var roles = RM.Roles;
    var users = UM.Users.ToArray();

    foreach (var r in roles)
    {
        string userRole = r.ToString();
    }

}

<table class="table">
    <thead class="thead-dark">
        <tr>
            <th class="text-center">
                User Name

            </th>
            <th class="text-center">
                Administrator
            </th>

            <th class="text-center">
                Professor
            </th>
            <th class="text-center">
                Applicant
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in users)

        {

            <tr>
                <td class="text-center">

                    @Html.DisplayFor(modelItem => item.UserName)

                </td>
                <td class="text-center">
                    @{
                        bool is_administrator = await UM.IsInRoleAsync(item, "Administrator");

                        if (is_administrator)
                        {
                            i++;
                            id_disabled = "flexSwitchCheckCheckedDisabled" + i;
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id=@id_disabled checked disabled>
                                <label class="custom-control-label" for=@id_disabled>

                                </label>
                            </div>


                        }
                        else
                        {
                            count++;
                            id_on_change = "customSwitch" + count;

                            <div class="custom-control custom-switch">
                                <input onchange="change_selected_role('@item.Id', 'Administrator', true)" type="checkbox" class="custom-control-input" id=@id_on_change>
                                <label class="custom-control-label" for=@id_on_change>

                                </label>
                            </div>
                        }
                    }

                </td>
                <td class="text-center">
                    @{
                        bool is_prof = await UM.IsInRoleAsync(item, "Professor");

                        if (is_prof)
                        {
                            i++;
                            id_disabled = "flexSwitchCheckCheckedDisabled" + i;
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id=@id_disabled checked disabled>
                                <label class="custom-control-label" for=@id_disabled>

                                </label>
                            </div>


                        }
                        else
                        {
                            count++;
                            id_on_change = "customSwitch" + count;
                            <div class="custom-control custom-switch">
                                <input onchange="change_selected_role('@item.Id', 'Professor', true)" type="checkbox" class="custom-control-input" id=@id_on_change>
                                <label class="custom-control-label" for=@id_on_change>

                                </label>
                            </div>
                        }
                    }

                </td>

                <td class="text-center">
                    @{
                        bool is_applicant = await UM.IsInRoleAsync(item, "Applicant");

                        if (is_applicant)
                        {
                            i++;
                            id_disabled = "flexSwitchCheckCheckedDisabled" + i;
                            <div class="custom-control custom-switch">
                                <input type="checkbox" class="custom-control-input" id=@id_disabled checked disabled>
                                <label class="custom-control-label" for=@id_disabled>

                                </label>
                            </div>


                        }
                        else
                        {
                            count++;
                            id_on_change = "customSwitch" + count;
                            <div class="custom-control custom-switch">
                                <input onchange="change_selected_role('@item.Id', 'Applicant', true)" type="checkbox" class="custom-control-input" id=@id_on_change>
                                <label class="custom-control-label" for=@id_on_change>

                                </label>
                            </div>
                        }
                    }

                </td>
            </tr>

        }
    </tbody>
</table>




